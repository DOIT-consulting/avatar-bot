@page "/"
@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using System.Net.Http;
@using System.IO;

<PageTitle>DOIT Avatar bot</PageTitle>
<div class="not-printable position-absolute" style="right: 10px;top: 0;">
    <button class="btn btn-primary mt-2" @onclick="downloadImage">Download</button>
    <button class="btn btn-primary mt-2" @onclick="changeDoitImage">Change image</button>
</div>
<div class="row" id="toPrint" style="min-width: 1860px!important;">
    <div class="col-6 d-flex flex-wrap align-items-center">
        <div class="wip-background">
            <div fxLayout="column" fxLayoutAlign="space-around center" class="mt-4 pt-4 d-inline-block">
                @if (string.IsNullOrEmpty(frameUri)) {
                    <video class="" id="videoFeed" width="360" height="240" />
                    <canvas class="d-none" id="currentFrame" width="360" height="240" />
                    <input class="form-control not-printable text-center" type="text" @bind="captionText" placeholder="Enter your name (optional)" />
                    <button class="btn btn-primary mt-2 not-printable" @onclick="CaptureFrame">Capture Frame</button>
                }
                @if (!string.IsNullOrEmpty(frameUri)) {
                    <div>
                        <img class="keeped-image" width="240" height="240" src="@frameUri" />
                        <br />
                        <h4>@captionText</h4>
                        <button class="btn btn-primary mt-2 not-printable" @onclick="Reset">Keep again</button>
                    </div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <img width="100%" src="images/wf2023.png" />
            </div>
            <div class="col-6">
                <img width="100%" src="images/logo_doit_def-01.png" />
            </div>
        </div>
    </div>
    <div class="col-6">
        <img width="100%" src="@doitImage" />
    </div>
</div>

@code {
    private string captionText;
    private string frameUri;
    private string doitImage;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            changeDoitImage();
            await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");
        }
    }

    private async Task CaptureFrame() {
        await JSRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }

    private async Task Reset() {
        frameUri = null;
        await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");
    }

    public void changeDoitImage() {
        var random = new Random();
        var n = random.Next(1, 4);
        var imageString = $"images/doit{n}.gif";
        if(imageString == doitImage){
            n = random.Next(1, 4);
            imageString = $"images/doit{n}.gif";
        }
        doitImage = imageString;
        StateHasChanged();
    }

    public async void downloadImage() {
        await JSRuntime.InvokeVoidAsync("takeScreenshot", "toPrint");
    }

    [JSInvokable]
    public void ProcessImage(string imageString) {
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);

        using (var image = Image.Load(imageData)) {
            Rectangle rectangle = new Rectangle(40, 0, 280, 240);
            image.Mutate(x => x.Flip(FlipMode.Horizontal).Crop(rectangle));
            frameUri = image.ToBase64String(JpegFormat.Instance);
        }
    }
}